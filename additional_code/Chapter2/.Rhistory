GSE104812_metadata$Gender <- as.character(GSE104812_metadata$Gender);
rm(GSE104812_raw);
## GSE81961.
GSE81961_raw <- as.data.frame(fread('metadata_files/metadata_GSE81961.tsv', header=T, sep='\t'));
GSE81961_metadata <- GSE81961_raw[GSE81961_raw$`characteristics_ch1.1`=='disease state: Control', # Select only control samples
c('title', 'geo_accession', 'platform_id', 'tissue:ch1', 'gender:ch1', 'age (yr):ch1' ,'supplementary_file')];
GSE81961_metadata <- cbind(GSE81961_metadata[,c(1,2)], 'GSE81961', GSE81961_metadata[,c(3,4)],
sapply(strsplit(GSE81961_metadata$supplementary_file, '_'), function(x){x[2]}),
sapply(strsplit(GSE81961_metadata$supplementary_file, '_'), function(x){x[3]}),
GSE81961_metadata[,5], GSE81961_metadata[,6]);
colnames(GSE81961_metadata) <- col_names;
GSE81961_metadata$Tissue <- "Peripheral blood";
GSE81961_metadata$Batch <- as.character(GSE81961_metadata$Batch);
GSE81961_metadata$Slide_ID <- as.character(GSE81961_metadata$Slide_ID);
GSE81961_metadata$Array_ID <- as.character(GSE81961_metadata$Array_ID);
GSE81961_metadata$Gender <- as.character(GSE81961_metadata$Gender);
rm(GSE81961_raw);
## GSE61496.
GSE61496_raw <- as.data.frame(fread('metadata_files/metadata_GSE61496.tsv', header=T, sep='\t'));
GSE61496_metadata <- GSE61496_raw[!duplicated(GSE61496_raw$`pair id:ch1`), # Select only one member of each twins pair
c('title', 'geo_accession', 'platform_id', 'tissue:ch1', 'sex, 1=m, 2=f:ch1', 'age:ch1', 'supplementary_file')];
GSE61496_metadata <- GSE61496_metadata[!is.na(GSE61496_metadata$`age:ch1`),]; # Remove samples with NA in age and gender
GSE61496_metadata <- cbind(GSE61496_metadata[,c(1,2)], 'GSE61496', GSE61496_metadata[,c(3,4)],
sapply(strsplit(GSE61496_metadata$supplementary_file, '_'), function(x){x[2]}),
sapply(strsplit(GSE61496_metadata$supplementary_file, '_'), function(x){x[3]}),
ifelse(GSE61496_metadata[,5]==1, 'Male', 'Female'), GSE61496_metadata[,6]);
colnames(GSE61496_metadata) <- col_names;
GSE61496_metadata$Tissue <- 'Whole blood';
GSE61496_metadata$Batch <- as.character(GSE61496_metadata$Batch);
GSE61496_metadata$Slide_ID <- as.character(GSE61496_metadata$Slide_ID);
GSE61496_metadata$Array_ID <- as.character(GSE61496_metadata$Array_ID);
GSE61496_metadata$Gender <- as.character(GSE61496_metadata$Gender);
GSE61496_metadata$Age_years <- as.numeric(GSE61496_metadata$Age_years);
rm(GSE61496_raw);
## Aref-Eshghi dataset.
AE_raw <- as.data.frame(fread('metadata_files/results_Erfan.csv', header=T, sep=','));
AE_disease <- as.data.frame(fread('metadata_files/Aref_Eshghi_disease_metadata_curated.csv'));
AE_all <- merge(AE_raw, AE_disease, by='SampleID');
AE_controls <- AE_all[AE_all$Disease_status=='Control',]; # Select only controls
AE_controls <- AE_controls[!is.na(AE_controls$age),]; # Remove samples without ages
AE_metadata <- as.data.frame(cbind(AE_controls$id,
AE_controls$SampleID,
AE_controls$batch,
'GPL13534',
'Peripheral blood',
sapply(strsplit(AE_controls$idat, '_'), function(x){x[1]}),
sapply(strsplit(AE_controls$idat, '_'), function(x){x[2]}),
ifelse(AE_controls$sex=='f', 'Female', 'Male'),
AE_controls$age));
colnames(AE_metadata) <- col_names;
rm(AE_raw, AE_disease, AE_all, AE_controls);
AE_metadata$Sample_name <- as.character(AE_metadata$Sample_name);
AE_metadata$GEO_sample <- as.character(AE_metadata$GEO_sample);
AE_metadata$Batch <- as.character(AE_metadata$Batch);
AE_metadata$Platform <- as.character(AE_metadata$Platform);
AE_metadata$Tissue <- as.character(AE_metadata$Tissue);
AE_metadata$Slide_ID <- as.character(AE_metadata$Slide_ID);
AE_metadata$Array_ID <- as.character(AE_metadata$Array_ID);
AE_metadata$Gender <- as.character(AE_metadata$Gender);
AE_metadata$Age_years <- as.numeric(as.character(AE_metadata$Age_years));
## GSE55491.
GSE55491_raw <- as.data.frame(fread('metadata_files/metadata_GSE55491.tsv', header=T, sep='\t'));
GSE55491_add <- as.data.frame(fread('metadata_files/samples4Daniel.csv', header=T, sep=','));
colnames(GSE55491_add)[1] <- 'source_name_ch1';
GSE55491_raw <- merge(GSE55491_raw, GSE55491_add, by='source_name_ch1'); # Add ages to metadata
GSE55491_raw <- GSE55491_raw[GSE55491_raw$SampleGroup=='Ctrl', ]; # Select only controls
GSE55491_metadata <- as.data.frame(cbind(GSE55491_raw$title, GSE55491_raw$geo_accession, 'GSE55491', GSE55491_raw$platform_id,
'Peripheral blood', as.character(GSE55491_raw$Sentrix_Barcode), GSE55491_raw$Sentrix_Position,
ifelse(GSE55491_raw$Sex=='M', 'Male', 'Female'), as.character(GSE55491_raw$Age)));
rm(GSE55491_raw, GSE55491_add);
colnames(GSE55491_metadata) <- col_names;
GSE55491_metadata$Sample_name <- as.character(GSE55491_metadata$Sample_name);
GSE55491_metadata$GEO_sample <- as.character(GSE55491_metadata$GEO_sample);
GSE55491_metadata$Batch <- as.character(GSE55491_metadata$Batch);
GSE55491_metadata$Platform <- as.character(GSE55491_metadata$Platform);
GSE55491_metadata$Tissue <- as.character(GSE55491_metadata$Tissue);
GSE55491_metadata$Slide_ID <- as.character(GSE55491_metadata$Slide_ID);
GSE55491_metadata$Array_ID <- as.character(GSE55491_metadata$Array_ID);
GSE55491_metadata$Gender <- as.character(GSE55491_metadata$Gender);
GSE55491_metadata$Age_years <- as.numeric(as.character(GSE55491_metadata$Age_years));
## GSE97362.
GSE97362_raw <- as.data.frame(fread('metadata_files/metadata_GSE97362.tsv', header=T, sep='\t'));
GSE97362_raw <- GSE97362_raw[GSE97362_raw$characteristics_ch1.3=="disease state: Control",]; # Select only controls
GSE97362_metadata <- as.data.frame(cbind(GSE97362_raw$title, GSE97362_raw$geo_accession, 'GSE97362', GSE97362_raw$platform_id,'Whole blood',
sapply(strsplit(sapply(strsplit(GSE97362_raw$supplementary_file, '/'), function(x){x[9]}), '_'), function(x){x[2]}),
sapply(strsplit(sapply(strsplit(GSE97362_raw$supplementary_file, '/'), function(x){x[9]}), '_'), function(x){x[3]}),
ifelse(GSE97362_raw$characteristics_ch1=='gender: female', 'Female', 'Male'),
sapply(strsplit(GSE97362_raw$characteristics_ch1.1, ': '), function(x){x[2]})));
colnames(GSE97362_metadata) <- col_names;
GSE97362_metadata <- GSE97362_metadata[!(GSE97362_metadata$Age_years=='-'),]; # Remove samples without ages
rm(GSE97362_raw);
GSE97362_metadata$Sample_name <- as.character(GSE97362_metadata$Sample_name);
GSE97362_metadata$GEO_sample <- as.character(GSE97362_metadata$GEO_sample);
GSE97362_metadata$Batch <- as.character(GSE97362_metadata$Batch);
GSE97362_metadata$Platform <- as.character(GSE97362_metadata$Platform);
GSE97362_metadata$Tissue <- as.character(GSE97362_metadata$Tissue);
GSE97362_metadata$Slide_ID <- as.character(GSE97362_metadata$Slide_ID);
GSE97362_metadata$Array_ID <- as.character(GSE97362_metadata$Array_ID);
GSE97362_metadata$Gender <- as.character(GSE97362_metadata$Gender);
GSE97362_metadata$Age_years <- as.numeric(as.character(GSE97362_metadata$Age_years));
## GSE41273.
GSE41273_raw <- as.data.frame(fread('metadata_files/metadata_GSE41273.tsv', header=T, sep='\t'));
GSE41273_ages <- as.data.frame(fread('metadata_files/FXS_samples.csv', header=T, sep=','));
GSE41273_files <- readLines('metadata_files/GSE41273_file_names.txt');
GSE41273_bridge <- data.frame(sample_number=sapply(strsplit(sapply(strsplit(GSE41273_files, '/'), function(x){x[3]}), '_'), function(x){x[1]}),
ID450k=sapply(strsplit(sapply(strsplit(GSE41273_files, '/'), function(x){x[3]}), '_'), function(x){paste0(x[2],'_',x[3])}));
GSE41273_bridge <- GSE41273_bridge[!duplicated(GSE41273_bridge),];
GSE41273_m1 <- merge(GSE41273_ages, GSE41273_bridge, by='ID450k');
colnames(GSE41273_m1)[2] <- 'title';
GSE41273_m2 <- merge(GSE41273_raw, GSE41273_m1, by='title');
GSE41273_m2 <- GSE41273_m2[GSE41273_m2$STATUS=='Control',]; # Select only controls
GSE41273_metadata <- as.data.frame(cbind(as.character(GSE41273_m2$title), GSE41273_m2$geo_accession, 'GSE41273', GSE41273_m2$platform_id, 'Peripheral blood',
sapply(strsplit(GSE41273_m2$ID450k, '_'), function(x){x[1]}), sapply(strsplit(GSE41273_m2$ID450k, '_'), function(x){x[2]}),
ifelse(GSE41273_m2$SEX=='male', 'Male', 'Female'), GSE41273_m2$Ados_Age_months/12));
colnames(GSE41273_metadata) <- col_names;
rm(GSE41273_raw, GSE41273_ages, GSE41273_files, GSE41273_bridge, GSE41273_m1, GSE41273_m2);
GSE41273_metadata$Sample_name <- as.character(GSE41273_metadata$Sample_name);
GSE41273_metadata$GEO_sample <- as.character(GSE41273_metadata$GEO_sample);
GSE41273_metadata$Batch <- as.character(GSE41273_metadata$Batch);
GSE41273_metadata$Platform <- as.character(GSE41273_metadata$Platform);
GSE41273_metadata$Tissue <- as.character(GSE41273_metadata$Tissue);
GSE41273_metadata$Slide_ID <- as.character(GSE41273_metadata$Slide_ID);
GSE41273_metadata$Array_ID <- as.character(GSE41273_metadata$Array_ID);
GSE41273_metadata$Gender <- as.character(GSE41273_metadata$Gender);
GSE41273_metadata$Age_years <- as.numeric(as.character(GSE41273_metadata$Age_years));
## GSE42861.
GSE42861_raw <- as.data.frame(fread('metadata_files/metadata_GSE42861.tsv', header=T, sep='\t'));
GSE42861_raw <- GSE42861_raw[GSE42861_raw$`disease state:ch1`=="Normal",]; # Select only controls
GSE42861_metadata <- as.data.frame(cbind(GSE42861_raw$title, GSE42861_raw$geo_accession, 'GSE42861', GSE42861_raw$platform_id,'Peripheral blood',
sapply(strsplit(sapply(strsplit(GSE42861_raw$supplementary_file, '/'), function(x){x[9]}), '_'), function(x){x[2]}),
sapply(strsplit(sapply(strsplit(GSE42861_raw$supplementary_file, '/'), function(x){x[9]}), '_'), function(x){x[3]}),
ifelse(GSE42861_raw$`gender:ch1`=='m', 'Male', 'Female'),
GSE42861_raw$`age:ch1`));
colnames(GSE42861_metadata) <- col_names;
rm(GSE42861_raw);
GSE42861_metadata$Sample_name <- as.character(GSE42861_metadata$Sample_name);
GSE42861_metadata$GEO_sample <- as.character(GSE42861_metadata$GEO_sample);
GSE42861_metadata$Batch <- as.character(GSE42861_metadata$Batch);
GSE42861_metadata$Platform <- as.character(GSE42861_metadata$Platform);
GSE42861_metadata$Tissue <- as.character(GSE42861_metadata$Tissue);
GSE42861_metadata$Slide_ID <- as.character(GSE42861_metadata$Slide_ID);
GSE42861_metadata$Array_ID <- as.character(GSE42861_metadata$Array_ID);
GSE42861_metadata$Gender <- as.character(GSE42861_metadata$Gender);
GSE42861_metadata$Age_years <- as.numeric(as.character(GSE42861_metadata$Age_years));
## GSE40279.
GSE40279_raw <- as.data.frame(fread('metadata_files/metadata_GSE40279.tsv', header=T, sep='\t'));
GSE40279_raw$title <- sapply(strsplit(GSE40279_raw$title, ' '), function(x){x[3]});
GSE40279_keys <- as.data.frame(fread('metadata_files/GSE40279_sample_key.txt', header=F, sep='\t'));
colnames(GSE40279_keys) <- c('col1', 'title', 'GEO_sample');
GSE40279_merged <- merge(GSE40279_raw, GSE40279_keys, by='title');
GSE40279_metadata <- as.data.frame(cbind(GSE40279_merged$title, GSE40279_merged$GEO_sample, 'GSE40279', GSE40279_merged$platform_id, 'Whole blood',
sapply(strsplit(GSE40279_merged$GEO_sample, '_'), function(x){x[1]}),
sapply(strsplit(GSE40279_merged$GEO_sample, '_'), function(x){x[2]}),
ifelse(GSE40279_merged$`gender:ch1`=='F', 'Female', 'Male'),
GSE40279_merged$`age (y):ch1`));
colnames(GSE40279_metadata) <- col_names;
GSE40279_na_samples <- c('5901393011_R05C01', '5901393011_R01C02', '5901393027_R01C01'); # Remove the 3 samples that were not present in raw data
GSE40279_metadata <- GSE40279_metadata[!(GSE40279_metadata$GEO_sample %in% GSE40279_na_samples),];
rm(GSE40279_raw, GSE40279_keys, GSE40279_merged);
GSE40279_metadata$Sample_name <- as.character(GSE40279_metadata$Sample_name);
GSE40279_metadata$GEO_sample <- as.character(GSE40279_metadata$GEO_sample);
GSE40279_metadata$Batch <- as.character(GSE40279_metadata$Batch);
GSE40279_metadata$Platform <- as.character(GSE40279_metadata$Platform);
GSE40279_metadata$Tissue <- as.character(GSE40279_metadata$Tissue);
GSE40279_metadata$Slide_ID <- as.character(GSE40279_metadata$Slide_ID);
GSE40279_metadata$Array_ID <- as.character(GSE40279_metadata$Array_ID);
GSE40279_metadata$Gender <- as.character(GSE40279_metadata$Gender);
GSE40279_metadata$Age_years <- as.numeric(as.character(GSE40279_metadata$Age_years));
## GSE51032.
GSE51032_raw <- as.data.frame(fread('metadata_files/metadata_GSE51032.tsv', header=T, sep='\t'));
GSE51032_controls <- GSE51032_raw[is.na(GSE51032_raw$`time to diagnosis:ch1`),]; # Remove people diagnosed with cancer
GSE51032_metadata <- as.data.frame(cbind(GSE51032_controls$title, GSE51032_controls$geo_accession, 'GSE51032', GSE51032_controls$platform_id, 'Peripheral blood',
sapply(strsplit(GSE51032_controls$title, '_'), function(x){x[1]}),
sapply(strsplit(GSE51032_controls$title, '_'), function(x){x[2]}),
ifelse(GSE51032_controls$`gender:ch1`=="F", "Female", "Male"), GSE51032_controls$`age:ch1`));
colnames(GSE51032_metadata) <- col_names;
rm(GSE51032_raw, GSE51032_controls);
GSE51032_metadata$Sample_name <- as.character(GSE51032_metadata$Sample_name);
GSE51032_metadata$GEO_sample <- as.character(GSE51032_metadata$GEO_sample);
GSE51032_metadata$Batch <- as.character(GSE51032_metadata$Batch);
GSE51032_metadata$Platform <- as.character(GSE51032_metadata$Platform);
GSE51032_metadata$Tissue <- as.character(GSE51032_metadata$Tissue);
GSE51032_metadata$Slide_ID <- as.character(GSE51032_metadata$Slide_ID);
GSE51032_metadata$Array_ID <- as.character(GSE51032_metadata$Array_ID);
GSE51032_metadata$Gender <- as.character(GSE51032_metadata$Gender);
GSE51032_metadata$Age_years <- as.numeric(as.character(GSE51032_metadata$Age_years));
## GSE74432.
GSE74432_metadata <- as.data.frame(fread('metadata_files/metadata_GSE74432_controls.tsv'));
GSE74432_metadata$Slide_ID <- as.character(GSE74432_metadata$Slide_ID);
GSE74432_metadata$Age_years <- as.numeric(GSE74432_metadata$Age_years);
## Merge all the metadata.
metadata_all <- rbind(GSE59065_metadata, GSE111629_metadata, GSE104812_metadata, GSE81961_metadata, GSE61496_metadata, AE_metadata,
GSE55491_metadata, GSE97362_metadata, GSE41273_metadata, GSE42861_metadata, GSE40279_metadata, GSE51032_metadata, GSE74432_metadata);
metadata_all$Disease_status <- 'Control';
colnames(metadata_all)[8] <- 'Sex';
###########################################################################################
#########                                                                         #########
#########                     Daniel Elias Martin Herranz                         #########
#########                             22/02/2019                                  #########
#########                              EMBL-EBI                                   #########
#########                           Thornton group                                #########
#########                                                                         #########
###########################################################################################
###########################################################################################
#####                                 PhD Thesis                                       ####
###########################################################################################
##### Create plots for the different steps in the pre-processing DNA methylation data  ####
##### pipeline.                                                                        ####
###########################################################################################
##### USAGE: manual.                                                                   ####
###########################################################################################
###########################################################
##################### Dependencies ########################
###########################################################
library(minfi);
library(RPMM);
library(IlluminaHumanMethylation27kmanifest);
library(ggplot2);
library(tidyr);
###########################################################################################
#########                                                                         #########
#########                     Daniel Elias Martin Herranz                         #########
#########                             22/02/2019                                  #########
#########                              EMBL-EBI                                   #########
#########                           Thornton group                                #########
#########                                                                         #########
###########################################################################################
###########################################################################################
#####                                 PhD Thesis                                       ####
###########################################################################################
##### Create plots for the different steps in the pre-processing DNA methylation data  ####
##### pipeline.                                                                        ####
###########################################################################################
##### USAGE: manual.                                                                   ####
###########################################################################################
###########################################################
##################### Dependencies ########################
###########################################################
library(minfi);
library(RPMM);
library(IlluminaHumanMethylation27kmanifest);
library(ggplot2);
library(tidyr);
###########################################################
#####################  Arguments ##########################
###########################################################
print('Getting the input arguments ...');
## Input, output and annotation paths
path_to_raw_idat <- "/Users/dem44/Documents/Thesis/PhD-Thesis/additional_code/Chapter2/GSE41273/raw_idat/";
setwd('/Users/dem44/Documents/Thesis/PhD-Thesis/additional_code/Chapter2/');
output_path <- "/Users/dem44/Documents/Thesis/PhD-Thesis/additional_code/Chapter2/";
ann_path <- '/Users/dem44/Desktop/methylation_clock/polycomb_hypothesis/epigenetic_ageing_clock/utils/'
folder_name <- strsplit(path_to_raw_idat, '/')[[1]][length(strsplit(path_to_raw_idat, '/')[[1]])-1];
# path_to_raw: path to the input folder.
move_idat_files <- function(path_to_raw){
all_idat_files_paths <- list.files(path_to_raw, recursive = TRUE, full.names = TRUE);
for(f in all_idat_files_paths){
file_name <- strsplit(f, '/')[[1]][length(strsplit(f, '/')[[1]])];
slide_f <- strsplit(file_name, '_')[[1]][2];
array_f <- strsplit(file_name, '_')[[1]][3];
dir.create(file.path(path_to_raw, slide_f), showWarnings = FALSE);
new_path <- file.path(path_to_raw,slide_f,file_name);
file.rename(from=f, to=new_path);
}
}
##### Function: BMIQ normalisation function (as implemented in the 'wateRmelon' package).
BMIQ <- function (beta.v, design.v, nL = 3, doH = TRUE, nfit = 50000,
th1.v = c(0.2, 0.75), th2.v = NULL, niter = 5, tol = 0.001,
plots = TRUE, sampleID = 1, pri = TRUE)
{
if (!library(RPMM, logical.return = TRUE, quietly = TRUE)) {
stop("need RPMM package")
}
good <- !is.na(beta.v)
out <- beta.v
beta.v <- beta.v[good]
design.v <- design.v[good]
print <- function(x) {
if (pri)
base::print(x)
}
type1.idx <- which(design.v == 1)
type2.idx <- which(design.v == 2)
beta1.v <- beta.v[type1.idx]
beta2.v <- beta.v[type2.idx]
if (min(beta1.v) == 0) {
beta1.v[beta1.v == 0] <- min(setdiff(beta1.v, 0))
}
if (min(beta2.v) == 0) {
beta2.v[beta2.v == 0] <- min(setdiff(beta2.v, 0))
}
if (max(beta1.v) == 1) {
beta1.v[beta1.v == 1] <- max(setdiff(beta1.v, 1))
}
if (max(beta2.v) == 1) {
beta2.v[beta2.v == 1] <- max(setdiff(beta2.v, 1))
}
w0.m <- matrix(0, nrow = length(beta1.v), ncol = nL)
w0.m[which(beta1.v <= th1.v[1]), 1] <- 1
w0.m[intersect(which(beta1.v > th1.v[1]), which(beta1.v <=
th1.v[2])), 2] <- 1
w0.m[which(beta1.v > th1.v[2]), 3] <- 1
print("Fitting EM beta mixture to type1 probes")
rand.idx <- sample(1:length(beta1.v), nfit, replace = FALSE)
em1.o <- blc(matrix(beta1.v[rand.idx], ncol = 1), w = w0.m[rand.idx,
], maxiter = niter, tol = tol, verbose = pri)
subsetclass1.v <- apply(em1.o$w, 1, which.max)
subsetth1.v <- c(mean(max(beta1.v[rand.idx[subsetclass1.v ==
1]]), min(beta1.v[rand.idx[subsetclass1.v == 2]])), mean(max(beta1.v[rand.idx[subsetclass1.v ==
2]]), min(beta1.v[rand.idx[subsetclass1.v == 3]])))
class1.v <- rep(2, length(beta1.v))
class1.v[which(beta1.v < subsetth1.v[1])] <- 1
class1.v[which(beta1.v > subsetth1.v[2])] <- 3
nth1.v <- subsetth1.v
print("Done")
if (plots) {
print("Check")
tmpL.v <- as.vector(rmultinom(1:nL, length(beta1.v),
prob = em1.o$eta))
tmpB.v <- vector()
for (l in 1:nL) {
tmpB.v <- c(tmpB.v, rbeta(tmpL.v[l], em1.o$a[l, 1],
em1.o$b[l, 1]))
}
pdf(paste("Type1fit-", sampleID, ".pdf", sep = ""), width = 6,
height = 4)
plot(density(beta1.v))
d.o <- density(tmpB.v)
points(d.o$x, d.o$y, col = "green", type = "l")
legend(x = 0.5, y = 3, legend = c("obs", "fit"), fill = c("black",
"green"), bty = "n")
dev.off()
}
d1U.o <- density(beta1.v[class1.v == 1])
d1M.o <- density(beta1.v[class1.v == 3])
mod1U <- d1U.o$x[which.max(d1U.o$y)]
mod1M <- d1M.o$x[which.max(d1M.o$y)]
d2U.o <- density(beta2.v[which(beta2.v < 0.4)])
d2M.o <- density(beta2.v[which(beta2.v > 0.6)])
mod2U <- d2U.o$x[which.max(d2U.o$y)]
mod2M <- d2M.o$x[which.max(d2M.o$y)]
th2.v <- vector()
th2.v[1] <- nth1.v[1] + (mod2U - mod1U)
th2.v[2] <- nth1.v[2] + (mod2M - mod1M)
w0.m <- matrix(0, nrow = length(beta2.v), ncol = nL)
w0.m[which(beta2.v <= th2.v[1]), 1] <- 1
w0.m[intersect(which(beta2.v > th2.v[1]), which(beta2.v <=
th2.v[2])), 2] <- 1
w0.m[which(beta2.v > th2.v[2]), 3] <- 1
print("Fitting EM beta mixture to type2 probes")
rand.idx <- sample(1:length(beta1.v), nfit, replace = FALSE)
em2.o <- blc(matrix(beta2.v[rand.idx], ncol = 1), w = w0.m[rand.idx,
], maxiter = niter, tol = tol, verbose = pri)
print("Done")
subsetclass2.v <- apply(em2.o$w, 1, which.max)
subsetth2.v <- c(mean(max(beta2.v[rand.idx[subsetclass2.v ==
1]]), min(beta2.v[rand.idx[subsetclass2.v == 2]])), mean(max(beta2.v[rand.idx[subsetclass2.v ==
2]]), min(beta2.v[rand.idx[subsetclass2.v == 3]])))
class2.v <- rep(2, length(beta2.v))
class2.v[which(beta2.v < subsetth2.v[1])] <- 1
class2.v[which(beta2.v > subsetth2.v[2])] <- 3
if (plots) {
tmpL.v <- as.vector(rmultinom(1:nL, length(beta2.v),
prob = em2.o$eta))
tmpB.v <- vector()
for (lt in 1:nL) {
tmpB.v <- c(tmpB.v, rbeta(tmpL.v[lt], em2.o$a[lt,
1], em2.o$b[lt, 1]))
}
pdf(paste("Type2fit-", sampleID, ".pdf", sep = ""), width = 6,
height = 4)
plot(density(beta2.v))
d.o <- density(tmpB.v)
points(d.o$x, d.o$y, col = "green", type = "l")
legend(x = 0.5, y = 3, legend = c("obs", "fit"), fill = c("black",
"green"), bty = "n")
dev.off()
}
classAV1.v <- vector()
classAV2.v <- vector()
for (l in 1:nL) {
classAV1.v[l] <- em1.o$mu[l, 1]
classAV2.v[l] <- em2.o$mu[l, 1]
}
print("Start normalising type 2 probes")
nbeta2.v <- beta2.v
lt <- 1
selU.idx <- which(class2.v == lt)
selUR.idx <- selU.idx[which(beta2.v[selU.idx] > classAV2.v[lt])]
selUL.idx <- selU.idx[which(beta2.v[selU.idx] < classAV2.v[lt])]
p.v <- pbeta(beta2.v[selUR.idx], em2.o$a[lt, 1], em2.o$b[lt,
1], lower.tail = FALSE)
q.v <- qbeta(p.v, em1.o$a[lt, 1], em1.o$b[lt, 1], lower.tail = FALSE)
nbeta2.v[selUR.idx] <- q.v
p.v <- pbeta(beta2.v[selUL.idx], em2.o$a[lt, 1], em2.o$b[lt,
1], lower.tail = TRUE)
q.v <- qbeta(p.v, em1.o$a[lt, 1], em1.o$b[lt, 1], lower.tail = TRUE)
nbeta2.v[selUL.idx] <- q.v
lt <- 3
selM.idx <- which(class2.v == lt)
selMR.idx <- selM.idx[which(beta2.v[selM.idx] > classAV2.v[lt])]
selML.idx <- selM.idx[which(beta2.v[selM.idx] < classAV2.v[lt])]
p.v <- pbeta(beta2.v[selMR.idx], em2.o$a[lt, 1], em2.o$b[lt,
1], lower.tail = FALSE)
q.v <- qbeta(p.v, em1.o$a[lt, 1], em1.o$b[lt, 1], lower.tail = FALSE)
nbeta2.v[selMR.idx] <- q.v
if (doH) {
lt <- 2
selH.idx <- c(which(class2.v == lt), selML.idx)
minH <- min(beta2.v[selH.idx])
maxH <- max(beta2.v[selH.idx])
deltaH <- maxH - minH
deltaUH <- -max(beta2.v[selU.idx]) + min(beta2.v[selH.idx])
deltaHM <- -max(beta2.v[selH.idx]) + min(beta2.v[selMR.idx])
nmaxH <- min(nbeta2.v[selMR.idx]) - deltaHM
nminH <- max(nbeta2.v[selU.idx]) + deltaUH
ndeltaH <- nmaxH - nminH
hf <- ndeltaH/deltaH
nbeta2.v[selH.idx] <- nminH + hf * (beta2.v[selH.idx] -
minH)
}
pnbeta.v <- beta.v
pnbeta.v[type1.idx] <- beta1.v
pnbeta.v[type2.idx] <- nbeta2.v
if (plots) {
print("Generating final plot")
d1.o <- density(beta1.v)
d2.o <- density(beta2.v)
d2n.o <- density(nbeta2.v)
ymax <- max(d2.o$y, d1.o$y, d2n.o$y)
pdf(paste("CheckBMIQ-", sampleID, ".pdf", sep = ""),
width = 6, height = 4)
plot(density(beta2.v), type = "l", ylim = c(0, ymax),
xlim = c(0, 1))
points(d1.o$x, d1.o$y, col = "red", type = "l")
points(d2n.o$x, d2n.o$y, col = "blue", type = "l")
legend(x = 0.5, y = ymax, legend = c("type1", "type2",
"type2-BMIQ"), bty = "n", fill = c("red", "black",
"blue"))
dev.off()
}
print(paste("Finished for sample ", sampleID, sep = ""))
out[good] <- pnbeta.v
pnbeta.v <- out
return(list(nbeta = pnbeta.v, class1 = class1.v, class2 = class2.v,
av1 = classAV1.v, av2 = classAV2.v, hf = hf, th1 = nth1.v,
th2 = th2.v))
}
############################################################
################## Running the pipeline ####################
############################################################
#### 1. Process the input dataset.
## Check if the folder has any IDAT files.
if(!file.exists(path_to_raw_idat)){stop(paste0('The project ', folder_name, ' has no IDAT files.'))};
## Move the IDAT files to a correct directory tree. ##
print('Rearranging IDAT files in a new directory tree ...');
move_idat_files(path_to_raw_idat);
## Classify the files into 27K / 450K. ##
print('Classifying the array platforms ...');
new_files_paths <- list.files(path_to_raw_idat, full.names = TRUE, recursive=TRUE);
array_class <- sapply(new_files_paths, function(f){
ifelse(file.size(f) < 800000, "27K", ifelse(file.size(f) < 9000000, "450K", NA));
});
if(sum(is.na(array_class)) > 0){
stop("The array platform could not be identified in some samples !!");
}
if(sum(array_class=="27K")){
stop('There are 27K samples among the input IDAT files. This version of the cell-type composition estimation can only handle 450K data.');
}
## Create sample annotation files. ##
print('Creating MINFI annotation for samples ...');
sample_ann <- unique(data.frame(
Array=as.character(sapply(names(which(array_class == "450K")), function(x){
a <- strsplit(strsplit(x, '/')[[1]][length(strsplit(names(which(array_class == "450K")), '/')[[1]])], '_')[[1]][3];
return(a);
})),
Slide=as.character(sapply(names(which(array_class == "450K")), function(x){
s <- strsplit(x, '/')[[1]][length(strsplit(names(which(array_class == "450K")), '/')[[1]])-1];
return(s);
})),
Basename=gsub('_Red.idat', '', gsub('_Grn.idat', '', names(which(array_class == "450K"))))));
print(paste0('The folder ', folder_name, ' contains ', length(list.files(path_to_raw_idat, recursive = TRUE, full.names = TRUE)),
' IDAT files.'));
## Get only the control samples.
raw_control_metadata <- as.data.frame(fread('final_control_data.tsv'));
raw_control_metadata <- raw_control_metadata[raw_control_metadata$Batch=='GSE41273',];
raw_control_metadata_tempID <- paste0(raw_control_metadata$Slide_ID, '_', raw_control_metadata$Array_ID);
raw_control_metadata_tempID <- c(raw_control_metadata_tempID, '7497398049_R02C01', '7512560130_R02C02');
sample_ann <- sample_ann[which(paste0(sample_ann$Slide, '_', sample_ann$Array) %in% raw_control_metadata_tempID),];
## QC plot.
input_rg_all <-read.metharray.exp(targets = sample_ann);
readRDS('betas_after_all_preprocessing');
input_final_df <- readRDS('betas_after_all_preprocessing');
colnames(input_final_df)
m_values <- log2(input_final_df[,-54]/(1-input_final_df[,-54]));
m_values$ProbeID <- rownames(m_values);
m_values_gather <- m_values[,-which(colnames(m_values) %in% c('sample15_7497398049_R02C01', 'sample76_7512560130_R02C02'))];
m_values_gather <- m_values_gather %>% gather(Sample, Betas, -ProbeID);
m_values_gather$QC <- ifelse(m_values_gather$Sample %in% c('sample15_7497398049_R02C01', 'sample76_7512560130_R02C02'),
'Failed QC', 'Passed QC');
plot_m_values_after_all_preprocessing <- ggplot() +
geom_line(data=m_values_gather[m_values_gather$QC=='Passed QC',], aes(x=Betas, group=Sample, col=QC), stat="density") +
geom_line(data=m_values_gather[m_values_gather$QC=='Failed QC',], aes(x=Betas, group=Sample, col=QC), stat="density") +
theme_classic() + scale_color_manual(labels = c("Passed QC"), values = c("grey")) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.title = element_blank(),
legend.box.background = element_rect(colour = "black", size=0.8)) +
xlab('M-value') + ylab("Density");
ggsave("plots/m_values_distributions_after_all_preprocessing.pdf", height=5, width=5);
